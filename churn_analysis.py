# -*- coding: utf-8 -*-
"""churn-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qbm0V8sJ0bN07zCmc61rgqtvESZ6ntp1
"""

pip install pandas

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('Telco-Customer-Churn.csv')
df.head()

df.info()

"""#replacing blanks with 0 as tenure is 0 and no total charges are recorded"""

df["TotalCharges"] = df["TotalCharges"].replace(" ", "0")
df["TotalCharges"] = df["TotalCharges"].astype("float")

df.info()

df.isnull().sum().sum()

df.describe()

df["customerID"].duplicated().sum()

def conv(value):
      if value == 1:
        return "yes"
      else:
       return "no"

df["SeniorCitizen"] = df["SeniorCitizen"].apply



"""#converted 0 and 1 values of senior citizen to yes/no to make it easier

"""

ax = sns.countplot(x = 'Churn', data = df)

ax.bar_label(ax.containers[0])
plt.title("Count of churn customers")
plt.show()

plt.figure(figsize = (3,4) )
gb = df.groupby("Churn").agg({'Churn':"count"})
plt.pie(gb['Churn'], labels = gb.index, autopct = "%1.2f%%")
plt.title("Percentage of churned customer")
plt.show()

#from the given pie chart we can  conclude that 26.54%  of our customers have churned out

plt.figure(figsize= (4,4))
sns.countplot(x = "gender", data = df, hue = "Churn")
plt.title("churn by gender")
plt.show()

plt.figure(figsize = (4,4))
ax = sns.countplot(x = "SeniorCitizen", data = df)
ax.bar_label(ax.containers[0])
plt.title("Count of customer by senior citizens")
plt.show()

grouped = df.groupby(['SeniorCitizen', 'Churn']).size().unstack()
percentage = grouped.div(grouped.sum(axis=1), axis=0) * 100

fig, ax = plt.subplots(figsize=(4, 4))
percentage.plot(kind='bar', stacked=True, ax=ax)

for i, bars in enumerate(ax.containers):
    for bar in bars:
        height = bar.get_height()
        if height > 0:
            ax.text(
                bar.get_x() + bar.get_width() / 2,
                bar.get_y() + height / 2,
                f"{height:.1f}%",
                ha='center', va='center', fontsize=10, color='white', fontweight='bold'
            )


plt.title("Churn by Senior Citizen (Stacked %)")
plt.xlabel("Senior Citizen")
plt.ylabel("Percentage")
plt.legend(title="Churn", loc="upper left", bbox_to_anchor=(1,1))
plt.show()

plt.figure(figsize = (9,4))
sns.histplot(x= "tenure", data = df, bins = 72, hue = "Churn")
plt.show()

plt.figure(figsize = (4,4))
ax = sns.countplot(x = "Contract", data = df, hue = "Churn")
ax.bar_label(ax.containers[0])
plt.title("Count of customer by Contract ")
plt.show()

df.columns.values

columns = ['PhoneService', 'MultipleLines', 'InternetService',
           'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',
           'TechSupport', 'StreamingTV', 'StreamingMovies']

# Set up the figure and axes for subplots
fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(15, 12))  # 3x3 grid for 9 plots
axes = axes.flatten()  # Flatten the 2D array of axes for easy iteration

# Create countplots for each column
for i, col in enumerate(columns):
    sns.countplot(x=df[col], hue=df['Churn'], ax=axes[i])
    axes[i].set_title(f"Churn by {col}")
    axes[i].set_xlabel(col)
    axes[i].set_ylabel("Count")
    axes[i].legend(title="Churn")

# Adjust layout to prevent overlapping
plt.tight_layout()
plt.show()

plt.figure(figsize = (6,4))
ax = sns.countplot(x = "PaymentMethod", data = df, hue = "Churn")
ax.bar_label(ax.containers[0])
ax.bar_label(ax.containers[1])
plt.title("Churned  customer by  payment method")
plt.xticks(rotation = 15)
plt.show()

